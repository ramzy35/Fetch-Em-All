<%- include("partials/header.ejs") %>
<link rel="stylesheet" href="/css/battle.css">
    <section class="app">
        <h1 class="title">Battle</h1>

        <section class="battle">
            <section class="battle__box--top-left">
                <h2 class="battle__pokemon--top"><%= ai.name %></h2>
                <section class="battle__hpbar--top">
                    <section class="battle__hpbar__fill--top" style=<%- getPercentAndColor(ai.currentHp, ai.hp) %>></section>
                </section>
                <h4 class="battle__pokemon__lvl--top">Lvl. <%= ai.level %></h4>
            </section>
            <section class="battle__box--top-right">
                <img id="ai-pokemon-img" src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/<%= ai.id %>.png" alt=""
                    class="battle__pokemon__img--top">
            </section>
            <section class="battle__box--bottom-left">
                <img id="user-pokemon-img" src="https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/<%= user.id %>.png" alt=""
                    class="battle__pokemon__img--bottom">
            </section>
            <section class="battle__box--bottom-right">
                <h2 class="battle__pokemon--bottom"><%= user.name %></h2>
                <section class="battle__hpbar--bottom">
                    <section class="battle__hpbar__fill--bottom" style=<%- getPercentAndColor(user.currentHp, user.hp) %>></section>
                </section>
                <h4 class="battle__pokemon__lvl--bottom">Lvl. <%= user.level %></h4>
                <h4 class="battle__pokemon__hp--bottom"><%= user.currentHp %>/<%= user.hp %></h4>
            </section>
            <section class="battle__bottom-menu">
                <section class="battle-text battle__text-box-left">
                    <p id="battle-log"></p>
                    <span id="blinker" class="blinker hidden">â–¶</span>
                </section>
                <section class="battle__text-box-right">
                    <section class="battle__options">
                        <form action="/battle/attack" method="POST">
                            <input type="hidden" name="lastLogIndex" value="<%= logLength %>">
                            <button <%= battleOver ? "disabled" : "" %> >
                                <h4 class="battle__options--top-left">Fight</h4>
                            </button>
                        </form>
                        <form action="/battle/catch" method="POST">
                            <input type="hidden" name="lastLogIndex" value="<%= logLength %>">
                            <button <%= battleOver ? "disabled" : "" %> >
                                <h4 class="battle__options--bottom-left">Catch</h4>
                                <input type="hidden" name="pokeId" value="<%= ai.id %>">
                            </button>
                        </form>

                        <a href="/pokemon?id=<%= ai.id %>">
                            <% if (battleOver) { %>
                                <h4 class="battle__options--bottom-right">Exit</h4>
                            <% } else {%>
                                <h4 class="battle__options--bottom-right">Run</h4>
                            <% } %>
                        </a>
                    </section> 

                </section>
            </section>
        </section>
    </section>
    <script>
        const userName = "<%= user.name %>";
        const aiName = "<%= ai.name %>";
        const isBattleOver = <%= battleOver ? 'true' : 'false' %>;
        const logMessages = <%- JSON.stringify(log.split("\n")) %>;
        let currentLogIndex = 0;
        const logElement = document.getElementById("battle-log");
        const blinker = document.getElementById("blinker");

        const fightBtn = document.querySelector("form[action='/battle/attack'] button");
        const catchBtn = document.querySelector("form[action='/battle/catch'] button");
        const buttonsToControl = [fightBtn, catchBtn];

        buttonsToControl.forEach(btn => btn.disabled = true);
        blinker.classList.add("hidden");

        function typeWriter(text, i = 0, callback) {
            if (i < text.length) {
                logElement.textContent += text.charAt(i);
                setTimeout(() => typeWriter(text, i + 1, callback), 50);
            } else {
                callback();
            }
        }

        function animateAttack(attacker) {
            const aiImg = document.getElementById("ai-pokemon-img");
            const userImg = document.getElementById("user-pokemon-img");

            if (attacker === "user") {
                userImg.classList.add("attack-anim");
                userImg.addEventListener("animationend", () => {
                    userImg.classList.remove("attack-anim");
                }, { once: true });
            } else {
                aiImg.classList.add("attack-anim-reverse");
                aiImg.addEventListener("animationend", () => {
                    aiImg.classList.remove("attack-anim-reverse");
                }, { once: true });
            }
        }

        function enableBattleButtons() {
            buttonsToControl.forEach(btn => btn.disabled = false);
        }

        function displayNextLog() {
            if (currentLogIndex >= logMessages.length) {
                if (!isBattleOver)
                    enableBattleButtons();
                blinker.classList.remove("hidden");
                return;
            }

            logElement.textContent = "";
            blinker.classList.add("hidden");

            typeWriter(logMessages[currentLogIndex], 0, () => {
                const currentLog = logMessages[currentLogIndex];

                if (currentLog.includes("used") || currentLog.includes("attacked")) {
                    if (currentLog.includes(userName)) {
                        animateAttack("user");
                    } else if (currentLog.includes(aiName)) {
                        animateAttack("ai");
                    }
                } 

                currentLogIndex++;
                setTimeout(displayNextLog, 1200);
            });
        }


        window.addEventListener("DOMContentLoaded", () => {
            if (isBattleOver) {
                // Disable fight and catch buttons because battle ended
                displayNextLog();
                buttonsToControl.forEach(btn => btn.disabled = true);
                blinker.classList.add("hidden");
            } else {
                displayNextLog();
            }
        });

        document.querySelectorAll("form").forEach(form => {
            if (form.action.endsWith("/attack") || form.action.endsWith("/catch")) {
                form.addEventListener("submit", () => {
                    buttonsToControl.forEach(btn => btn.disabled = true);
                    blinker.classList.add("hidden");
                });
            }
        });
    </script>
</body>

</html>