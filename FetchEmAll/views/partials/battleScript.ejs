<script>
        const userName = "<%= user.name %>";
        const aiName = "<%= ai.name %>";
        const isBattleOver = <%= battleOver ? 'true' : 'false' %>;
        const logMessages = <%- JSON.stringify(log.split("\n")) %>;
        let currentLogIndex = 0;
        const logElement = document.getElementById("battle-log");
        const blinker = document.getElementById("blinker");

        const fightBtn = document.querySelector("form[action='/battle/attack'] button");
        const catchBtn = document.querySelector("form[action='/battle/catch'] button");
        const buttonsToControl = [fightBtn, catchBtn];

        buttonsToControl.forEach(btn => btn.disabled = true);
        blinker.classList.add("hidden");

        function typeWriter(text, i = 0, callback) {
            if (i < text.length) {
                logElement.textContent += text.charAt(i);
                setTimeout(() => typeWriter(text, i + 1, callback), 50);
            } else {
                callback();
            }
        }

        function animateAttack(attacker) {
            const aiImg = document.getElementById("ai-pokemon-img");
            const userImg = document.getElementById("user-pokemon-img");

            if (attacker === "user") {
                userImg.classList.add("attack-anim");
                userImg.addEventListener("animationend", () => {
                    userImg.classList.remove("attack-anim");
                }, { once: true });
            } else {
                aiImg.classList.add("attack-anim-reverse");
                aiImg.addEventListener("animationend", () => {
                    aiImg.classList.remove("attack-anim-reverse");
                }, { once: true });
            }
        }

        function enableBattleButtons() {
            buttonsToControl.forEach(btn => btn.disabled = false);
        }

        function displayNextLog() {
            if (currentLogIndex >= logMessages.length) {
                if (!isBattleOver)
                    enableBattleButtons();
                blinker.classList.remove("hidden");
                return;
            }

            logElement.textContent = "";
            blinker.classList.add("hidden");

            typeWriter(logMessages[currentLogIndex], 0, () => {
                const currentLog = logMessages[currentLogIndex];

                if (currentLog.includes("gebruikt")) {
                    if (currentLog.includes(userName)) {
                        animateAttack("user");
                    } else if (currentLog.includes(aiName)) {
                        animateAttack("ai");
                    }
                } 

                currentLogIndex++;
                setTimeout(displayNextLog, 1200);
            });
        }


        window.addEventListener("DOMContentLoaded", () => {
            if (isBattleOver) {
                displayNextLog();
                buttonsToControl.forEach(btn => btn.disabled = true);
                blinker.classList.add("hidden");
            } else {
                displayNextLog();
            }
        });

        document.querySelectorAll("form").forEach(form => {
            if (form.action.endsWith("/attack") || form.action.endsWith("/catch")) {
                form.addEventListener("submit", () => {
                    buttonsToControl.forEach(btn => btn.disabled = true);
                    blinker.classList.add("hidden");
                });
            }
        });
    </script>